name: Web App CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.7
        options: --privileged
        runs-on: ubuntu-latest

    steps:
      # Étape 1 : Checkout du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Docker (si nécessaire)
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Étape 3 : Installer les dépendances Node.js (si applicable)
      - name: Install Node.js dependencies
        run: |
          cd ./api-nodejs  # Va dans le dossier de ton application Node.js
          npm install  # Installe les dépendances Node.js

      # Étape 4 : Installer les dépendances PHP (si applicable)
      - name: Install PHP dependencies (Composer)
        run: |
          cd ./api-php  # Va dans le dossier de ton application PHP
          curl -sS https://getcomposer.org/installer | php  # Installe Composer
          php composer.phar install  # Installe les dépendances PHP

      # Étape 5 : Construire et démarrer les conteneurs avec Docker Compose
      - name: Build and run containers with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d --build  # Démarre les conteneurs en mode détaché et construit les images
          docker-compose ps  # Liste les conteneurs pour vérifier leur état

      # Étape 6 : Lancer des tests ou vérifier les services
      - name: Run tests (Node.js)
        run: |
          docker-compose exec node npm test  # Remplace par la commande de test Node.js si applicable

      - name: Run tests (PHP)
        run: |
          docker-compose exec php_apache php /var/www/html/vendor/bin/phpunit  # Test PHP avec PHPUnit (si applicable)

      # Étape 7 : Nettoyer (arrêter et supprimer les conteneurs)
      - name: Stop and remove containers
        run: docker-compose down

